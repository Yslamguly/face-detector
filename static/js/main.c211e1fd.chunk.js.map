{"version":3,"sources":["components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","className","options","max","style","height","width","src","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageUrl","box","alt","id","top","topRow","left","leftCol","right","rightCol","bottom","bottomRow","app","Clarifai","App","apiKey","particlesOptions","background","color","value","fpsLimit","interactivity","events","onHover","enable","mode","resize","particles","links","distance","opacity","move","direction","outModes","default","random","speed","straight","number","density","area","shape","size","min","detectRetina","useState","input","setInput","setImageUrl","setBox","particlesInit","main","loadFull","init","event","target","models","predict","version","then","response","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","calculateFaceLocation","catch","err","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c211e1fd.chunk.js","sourcesContent":["import React from \"react\";\nimport Tilt from 'react-parallax-tilt';\nimport './Logo.css';\n\nconst Logo = () =>{\n    return(\n        <div className={'ma4 mt4'}>\n            <Tilt className={'br2 shadow-2'} options={{ max : 45 }} style={{ height: 150, width: 150 }}>\n                <div className={'Tilt-inner'}><img src={'http://cdn.onlinewebfonts.com/svg/img_432607.png'} style={{height:150}}/>Ô∏èBrain</div>\n            </Tilt>\n        </div>\n    )\n}\n\nexport default Logo","import React from \"react\";\nimport './ImageLinkForm.css'\nconst ImageLinkForm = ({onInputChange,onButtonSubmit}) =>{\n    return(\n        <div className={'ma4 mt0'}>\n            <p className={'f3 white'}>\n                {'This magic brain will detect faces in your pictures. Give it a try!'}\n            </p>\n            <div className={'center'}>\n                <div className={' form center pa4 br3 shadow-5'}>\n                    <input className={'f4 pa2 w-70 center'} type={'url'} onChange={onInputChange}/>\n                    <button className={'w-30 grow f4 link ph3 pv2 dib white bg-light-purple'} onClick={onButtonSubmit}>Detect</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm","import React from \"react\";\nimport './FaceRecognition.css'\nimport Tilt from 'react-parallax-tilt';\n\nconst FaceRecognition = ({imageUrl,box}) =>{\n    return(\n        <div className={'center ma'}>\n            <div className={'absolute mt2'}>\n                <img src={imageUrl} alt={''} id={'inputImage'} width={'500px'} height={'auto'}/>\n                <div className={'bounding-box'} style={{top:box.topRow,left:box.leftCol,right:box.rightCol,bottom:box.bottomRow}}></div>\n            </div>\n        </div>\n    )\n}\n\nexport default FaceRecognition","import React,{useState} from \"react\";\nimport './App.css';\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\nimport Clarifai from 'clarifai';\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\n\nconst app = new Clarifai.App({\n  apiKey : '5f1aa879e6c647029a7ccca461a5454e'\n});\nconst particlesOptions = {\n  background: {\n    color: {\n      value: \"linear-gradient(to left, #a0b73b 0% , #2468fc)\",\n    },\n  },\n  fpsLimit: 120,\n  interactivity: {\n    events: {\n      onHover: {\n        enable: false,\n        mode: \"repulse\",\n      },\n      resize: true,\n    },\n  },\n  particles: {\n    color: {\n      value: \"#ffffff\",\n    },\n    links: {\n      color: \"#ffffff\",\n      distance: 270,\n      enable: true,\n      opacity: 0.5,\n      width: 1,\n    },\n    move: {\n      direction: \"none\",\n      enable: true,\n      outModes: {\n        default: \"bounce\",\n      },\n      random: false,\n      speed: 1.2,\n      straight: false,\n    },\n    number: {\n      density: {\n        enable: false,\n        area: 700,\n      },\n      value: 20,\n    },\n    opacity: {\n      value: 0.5,\n    },\n    shape: {\n      type: \"circle\",\n    },\n    size: {\n      value: { min: 3, max: 8 },\n    },\n  },\n  detectRetina: true,\n\n}\n\nconst App = () =>{\n\n  const [input,setInput] = useState('')\n  const [imageUrl,setImageUrl] = useState('')\n  const [box,setBox] = useState({});\n  const calculateFaceLocation = (data) =>{\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box\n    const image = document.getElementById('inputImage')\n    const width = Number(image.width)\n    const height = Number(image.height)\n    return{\n      leftCol: clarifaiFace.left_col * width,\n      topRow : clarifaiFace.top_row * height,\n      rightCol : width - (clarifaiFace.right_col * width),\n      bottomRow : height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  const onButtonSubmit = () =>{\n    setImageUrl(input)\n    app.models\n        .predict(\n            {\n              id: \"a403429f2ddf4b49b307e318f00e528b\", // id of FACE_DETECT_MODEL model\n              version: \"34ce21a40cc24b6b96ffee54aabff139\",\n            },\n            input)\n        .then(response => {\n          setBox(calculateFaceLocation(response))\n        })\n        .catch(err =>console.log(err))\n  }\n  const particlesInit = async (main) => {\n    await loadFull(main);\n  };\n\n    return (\n      <div className=\"App\">\n        <Particles\n            className={'particles'}\n            id=\"tsparticles\"\n            init={particlesInit}\n            options={particlesOptions}/>\n        <Logo/>\n        <ImageLinkForm onInputChange={(event)=>setInput(event.target.value)}\n                       onButtonSubmit={onButtonSubmit}\n        />\n        <FaceRecognition box={box} imageUrl={imageUrl} />\n      </div>\n    );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}